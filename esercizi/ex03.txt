Container, iteratori e algoritmi; classi
----------------------------------------

18) Generatore di quadrati magici
un quadrato magico è una matrice 3x3 in cui la somma di ogni riga è uguale alla somma di ogni colonna e alla somma di ognuna delle due diagonali. I numeri all'interno del quadrato non vengono ripetuti! Ad es:
2 7 6
9 5 1
4 3 8
è un quadrato magico a somma 15, mentre
1 1 1
1 1 1
1 1 1
non è un quadrato magico.
Il valore della somma di un quadrato magico è detto "costante magica"
Scrivere un programma che generi tutti i quadrati magici di lato 3, contenenti i numeri da 1 a 9 - cioè tutti i quadrati simili a quello del primo esempio.

Suggerimenti:
Mettiamo i numeri da 1 a 9 in un vettore (pensiamola come una matrice 3x3, "spalmata" per righe su un vettore) e calcoliamo tutte le permutazioni. Per ogni permutazione, verificare che la somma delle righe è uguale alla somme delle colonne ed uguale alla somma delle due diagonali. Se questo è verificato, stampare la permutazione trovata.

Per verificare che vector sia una quadrato magico, scriviamo la funzione
	bool okQuadratoMagico( std::vector<int> qm )
che restituisce true in caso favorevole, false al contrario

Le permutazioni del vettore possono essere calcolate tramite la funzione std::next_permutation() [vedi esempio e return value su www.cplusplus.com/reference/algorithm/next_permutation/]. La generazione del vettore di partenza gioca un ruolo fondamentale nel calcolo delle permutazioni!

Quanti quadrati magici vengono stampati?
Qual è il valore della costnte magica dei quadrati magici visualizzati?


Traccia:

bool okQuadratoMagico(std::vector<int> qm) { 
	// creazione variabile int sommaRiferim
	// sommaRiferim = calcolo somma di una diagonale
	// calcolo somma seconda diagonale
	// se somma seconda diagonale != sommaRiferim return false
	
	// calcolo somma prima riga e confronto con sommaRiferim; se diversa, return false
	// calcolo somma seconda riga e confronto con sommaRiferim; se diversa, return false
	...
	// lo stesso per le tre colonne
	
	// se arrivo fin qui, return true
	}
	
void stampaQuadrato(std::vector<int> qm) { ... }

int main() {
	std::vector<int> candidato {1, 2, 3, 4, 5, 6, 7, 8, 9}; // Riempimento candidato con prima combinazione
	
	while (true) {
		if (okQuadratoMagico(candidato)) {
			std::cout << "Trovata una soluzione!" << std::endl;
			stampaQuadrato(candidato);
		}
		
		// Calcolo nuova permutazione con istruzione:
		//		bool altra_perm = std::next_permutation( /*  ..  */ )
		// se non ci sono altre permutazioni, esco dal while
	}

  return 0;
}





19) Stampa dell'indice di un libro. Scriviamo un programma che stampi l'indice di un libro. La stampa deve essere opportunamente impaginata in modo che il risultato sia simile a questo:
Introduzione................................................    1
Capitolo 1: Ripasso C.......................................   35
Capitolo 2: Stream..........................................   42
Capitolo 3: STL: Containers.................................   77
Capitolo 4: STL: Iterators..................................   91
Capitolo 5: STL: Algorithm..................................  127
Capitolo 6: Classi e costruttori............................  154
Fare in modo che la colonna dei titoli sia larga 60 caratteri, i titoli siano giustificati a sinistra e gli spazi vuoti siano riempiti da '.'; la colonna delle pagine deve essere larga 5 caratteri e giustificata a sinistra.

// Traccia e suggerimenti:
Memorizzare il contenuto dell'indice in un oggetto std::map<int, std::string> in cui la chiave di ricerca è rappresentata dalla pagina, mentre il valore dalla stringa che intitola il capitolo.
Le coppie memorizzate devono essere:
(1, "Introduzione")
(35, "Capitolo 1: Ripasso C")
(42, "Capitolo 2: Stream" )
(77, "Capitolo 3: STL: Containers")
(91, "Capitolo 4: STL: Iterators")
(127, "Capitolo 5: STL: Algorithm")
(154, "Capitolo 6: Classi e costruttori")

Per accedere ad un particolare elemento di una map è sufficiente fornire una chiave valida attraverso l'operatore [], ad es, per popolare la mappa è possibile intervenire in questo modo:
	std::map<int, std::string> contenuti;
	contenuti[1]   = "Introduzione";
	contenuti[35]  = "Capitolo 1: Ripasso C";
	/* eccetera */
e per accere all'elemento la cui chiave è "35", è sufficiente scrivere:
	contenuti[35]

Per la stampa dell'indice è necessario iterare sugli elementi della map: usare un ciclo for con un iteratore opportunamente definito
	for (auto it = contenuti.begin(); it != contenuti.end(); it++)
All'interno del ciclo, it è un iteratore (quindi un puntatore) che punterà ad uno specifico elemento della mappa, ovvero, una coppia chiave-valore. Per accedere alla chiave della coppia, usare l'istruzione:
	it->first
mentre per accedere al valore della coppia:
	it->second
	
La formattazione della stampa deve essere eseguita tramite stream manipulator, in particolare:
std::cout.width( n ) specifica la larghezza della colonna di cout a n pixel;
std::left giustifica il testo a sinistra;
std::right giustifica il testo a destra;
std::setfill('.') imposta il carattere con cui riempire gli eventuali spazi vuoti;
A titolo di esempio, provare ad eseguire la seguente istruzione:
	std::cout.width( 45 );
	std::cout << std::left << std::setfill( '.' ) << "Ehilà!" << std::endl;
	
	
	
	
20) Scrivere una classe "Studente" avente come membri privati:
	std::string nome;
	std::string cognome;
	int voti[2];			// voti[0]: voto esame scritto, voto[1]: voto esame orale
La classe deve avere la funzione membro privata
	int media();			// restituisce la media intera dei due voti
e le funzioni membro pubbliche:
	void disp();			// Stampa nome, cognome e votazione media restituita da media()
	void setScritto(int);	// set voti[0] (controllare che sia 0 < x < 30)
	void setOrale(int);		// set voti[1] (controllare che sia 0 < x < 30)
Il costruttore di default
	Studente()
inizializza nome e cognome con stringhe nulle e voti a 0
Il costruttore completo è nella forma:
	Studente(std::string cogn, std::string nm)
assegna nome e cognome ai membri della classe

Salvare l'interfaccia nel file prog20_studente.h, mentre l'implementazione della classe nel file prog20_studente.cpp.
Il main sarà scritto nel file prog20_main.cpp

Nota: se eseguito con un compilatore online, preferire https://repl.it/languages/cpp rispetto a http://cpp.sh


// Traccia:
il file prog20_studente.h sarà questo:
----------------
#pragma once					// Questa direttiva di compilazione indica al compilatore di includere solo una volta le intestazioni presenti in studente.h 
#include <string>
#include <iostream>

class Studente {								// Dichiarazione della classe studente
public:											// Da questa linea in poi vengono dichiarati i membri pubblici della classe
	Studente();									// Costruttore di default
	Studente(std::string cogn, std::string nm);	// Costruttore specializzato
	
	void disp();								// fuzioni membro pubbliche
	void setScritto( int );
	void setOrale( int );
private:										// Da questa linea in poi vengono dichiarati i membri privati della classe
	std::string nome;
	std::string cognome;
	int voti[2];
	
	int media();
};
----------------
In esso sono dichiarate le segnature dei costruttori, delle funzioni membro e i membri della classe (eh, cambiatele a piacimento, se vi pare!)



In prog20_studente.cpp verranno definite le funzioni membro della classe. Sarà fatto così:
-----------------------------------
#include "prog20_studente.h"

Studente::Studente(std::string cogn, std::string nm) :
	cognome{cogn}, nome{nm} 	// Lista di inizializzazione dei membri della classe
{
	voti[0] = 0;
	voti[1] = 0;
}

Studente::Studente() :
	cognome{""}, nome{""} 		// Lista di inizializzazione dei membri della classe
{
	voti[0] = 0;
	voti[1] = 0;
}

int Studente::media() {
	return (voti[0] + voti[1]) / 2;
}

void Studente::disp() {
	std::cout << "Nome: " << nome << " Cognome: " << cognome << " Media dei voti: " << media() << std::endl;
}

// e così via...
----------------------------------

Testare il programma con un main simile a questo:
int main( void ) {
	Studente stud("Tizio", "Caio");		// Costruisco un oggetto di tipo Studente che inizializza i membri nome e cognome
	stud.setScritto(15);				// Chiamata alla funzione membro pubblico per impostare il membro voti[0]
	stud.setOrale(24);					// Chiamata alla funzione membro pubblico per impostare il membro voti[1]
	stud.disp();						// Chiamata alla funzione membro pubblico stampare nome, cognome e media dei due voti
	return 0;
}

Nel main, non dimenticate di includere il file include prog20_studente.h!!!!
	#include "prog20_studente.h"
	
	