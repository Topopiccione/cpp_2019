21) Realizziamo un vocabolario. Anzi, quasi.
parole.txt è un file di testo che contiene parole singole, separate da <invio> e scritte con caratteri minuscoli. 
Es:
marmotta
marmitta
cammello
corteccia
...
Scriviamo una classe "Vocabolario" i cui compiti sono:
- aprire il file parole.txt
- leggere tutte le parole contenute nel file e memorizzarle in un vettore contenuto nella classe stessa
- chiudere il file
Oltre a queste funzionalità di base, scrivere una funzione membro che restituisca una parola a caso tra quelle memorizzate nel vettore.
Nello scrivere la classe, utilizzare i concetti di RAII visti a lezione!
Scrivere un semplice main di esempio per testare la classe

//Suggerimenti e traccia:
La classe è dichiarata nel seguente modo:

prog21_vocabolario.h
----------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <time.h>

class Vocabolario {
public:
	Vocabolario(std::string filename);	// costruttore pubblico, prende il nome file come parametro
	~Vocabolario();						// distruttore pubblico
	std::string getRandomWord();		// funzione che restituisce una parola a caso, tra quelle presenti in elenco

private:
	std::string fileNm;					// nome del file
	std::fstream fin;					// oggetto fstream: è il file da cui prelevare le parole
	std::vector<std::string> voc;		// container per le parole; io ho usato vector, ma quale potrebbe essere più appropriato?
};
-----------------------------

Implementare la classe seguendo il paradigma RAII prevede che la risorsa fstream venga allocata nel costruttore e rilasciata nel distruttore. Nel costruttore, inserire anche la procedura di lettura delle parole dal file.


prog21_vocabolario.cpp
-----------------------------
#include "prog21_vocabolario.h"

Vocabolario::Vocabolario( std::string filename ): fileNm( filename ) {
	// apri fin
	std::ifstream fin(/* .... */);
	std::string tempWord;
	
	// leggi fin fino alla fine del file e voc.push_back di ogni parola nel container
	while (!fin.eof()) {
		fin >> tempWord;
		/* .... */
	}
	std::cout << "Lette " << voc.size() << " parole." << std::endl;
	
	// inizializza il generatore random
	srand(time(NULL));
}

Vocabolario::~Vocabolario() {
	// Chiudi fin
	/* .... */
}
		
std::string Vocabolario::getRandomWord() {
	// return di un elemento a caso di diz
	int numeroRandom = rand() % voc.size();
	
	/* .... */
}
------------------------------


Il main dovrà contenere il costruttore di un oggetto di tipo Vocabolario e almeno una chiamata alla funzione getRandomWord()


prog21_main.cpp
------------------------------
#include <iostream>
#include "prog21_vocabolario.h"

int main(void) {
	Vocabolario vvv("parole.txt");
	
	for (int i = 0; i < 10; i++)
		std::cout << vvv.getRandomWord() << std::endl;
	
	return 0;
}
------------------------------






13) L'impiccato
Il programma sceglie una parola a caso dal un dizionario e presenta all'utente una serie di caratteri "_" pari alla lunghezza della parola scelta.
L'utente deve indovinare la parola, inserendo un carattere alla volta. Se il carattere immesso dall'utente è contenuto nella parola segreta, esso verrà stampato al posto del "_" nella relativa posizione corretta. Se il carattere immesso dall'utente non è contenuto nella parola segreta, il contatore dei tentativi viene decrementato.
Il gioco termina quando l'utente ha indovinato tutti i caratteri della parola, oppure quando ha esaurito i tentativi.

// Esempio di esecuzione:
Lette 25 parole.
Tentativo rimanenti:8 e
_ _ _ _ _ _ _ e
Tentativo rimanenti:8 a
_ a _ _ _ _ _ e
Tentativo rimanenti:8 i
_ a _ _ _ i _ e
Tentativo rimanenti:8 o
_ a _ o _ i _ e
Tentativo rimanenti:8 p
_ a _ o _ i _ e
Tentativo rimanenti:7 c
c a _ o _ i _ e
Tentativo rimanenti:7 l
c a _ o _ i _ e
Tentativo rimanenti:6 r
c a r o _ i _ e
Tentativo rimanenti:6 m
c a r o _ i _ e
Tentativo rimanenti:5 n
c a r o _ i _ e
Tentativo rimanenti:4 t
c a r o t i _ e
Tentativo rimanenti:4 d
c a r o t i d e
Ok, hai vinto. Ok, sei bravo. Ok, ora vai a fare altro.




// Suggerimenti e traccia
Usare la classe creata nell'esercizio 21 come generatore di parole casuali.

E' possibile modellizzare il gioco con una classe, ma anche un approcio puramente procedurale va bene!
Le strade per risolvere il problema sono molte, io ho scelto di memorizzare la parola segreta in una stringa
e la parola corrente in un vettore di char. Questo vettore è lungo quanto la parola segreta e all'avvio del
programma, ogni elemento è impostato a '_'.
Se il giocatore indovina una lettera essa viene scritta nei "posti giusti" nella parola corrente.

Quindi, le strutture dati che ho deciso di utilizzare sono queste:
// La parola misteriosa da indovinare, scelta a caso dal dizionario
	std::string parolaMisteriosa = vvv.getRandomWord();
// Variabile temporanea: carattere di input, aggiornato ad ogni iterazione
	char carattereImmesso;
// Contatore dei caratteri mancanti. Inizializzato a parolaMisteriosa.size() e decrementato ogni volta che il giocatore
// indovina un carattere della parola misteriosa
	int caratteriMancanti = parolaMisteriosa.size();
// Array di lavoro: lungo parolaMisteriosa.size(), inizializzato con tanti '_' quante le lettere della parola misteriosa;
// gli '_' vengono rimpiazzati dalle lettere della parola misteriosa che il giocatore ha indovinato
	std::vector<char> parolaCorrente(parolaMisteriosa.size(), '_');
// Opzionale: array delle lettere già inserite dal giocatore
	std::vector<char> lettereImmesse;


Il main() può essere simile a questo:

int main( void ) {
	int maxTentativi = 5;
	
	// Creazione oggetto dizionario
	// Estrazione di una parola da dizionario e memorizzazione parola in std::string parolaMisteriosa
	
	// init strutture dati come sopra

	// while maxTentativi > 0
		
		// Stampa parolaCorrente
		
		std::cout << "Tentativo rimanenti: " << maxTentativi << " ";
		// input lettera + check
		do {
			// leggere da terminale e memorizzare carattere in "carattereImmesso"
		} while (!letteraOk(carattereImmesso, lettereImmesse));

		// test lettera + update display + update lettere usate
		if (!testLettera(parolaMisteriosa, carattereImmesso, caratteriMancanti, parolaCorrente))
			maxTentativi--;
		
		// Se caratteriMancanti == 0, allora esci dal while
		

	if (caratteriMancanti == 0)
		std::cout << "Ok, hai vinto. Ok, sei bravo. Ok, ora vai a fare altro." << std::endl;
	else {
		std::cout << "Hai rovinato tutto, come tuo solito." << std::endl;
		std::cout << "Davvero, non ho parole - a parte quella segreta, ovviamente, che era: " << parolaMisteriosa << std::endl;
	}
	return 0;
}
-------------------------


La funzione
bool letteraOk(const char carattereImmesso, std::vector<char> &lettereImmesse);
controlla che il carattere inserito sia un carattere alfabetico valido, nel qual caso restituisce "true".
Opzionalmente, controlla che il carattere non sia già stato inserito.
Prende in ingresso il carattere immesso (come const) e il riferimento al vettore lettereImmesse [opzionale].


La funzione
bool testLettera(const std::string parolaMisteriosa, const char carattereImmesso, int &caratteriMancanti, std::vector<char> &parolaCorrente)
forma il cuore del loop. Prende in ingresso la parola misteriosa (const), il carattere immesso (const), la referenza alla variabile che
conta i caratteri mancanti e la referenza al vettore di lavoro parolaCorrente (queste ultime due entità vengono modificate dalla funzione).
Svolge più funzioni, in particolare:
- loop sui caratteri della parola misteriosa: confronta ognuno di questi caratteri con il carattere immesso
  Se il carattere immesso coincide con quello della parola misterioda valutato in questo loop:
  - decrementa caratteriMancanti
  - sostituisce il carattere '_' in parolaCorrente con il carattere immesso
- stampa parolaCorrente
- se il carattere immesso è presente nella parola misteriosa restituisce "true".

In breve, il codice è simile a questo:

	bool letteraTrovata = false;
	for (int i = 0; /* .... */) {
		if (carattereImmesso == parolaMisteriosa[i]) {
			/* .... */
		}
		std::cout << parolaCorrente[i] << " ";
	}
	std::cout << std::endl;
	return letteraTrovata;
	
	
Ricordo che per accedere al i-esimo carattere di una stringa è possibile utilizzare l'operatore []
std::string stringa01 = "abcdefghijkl";
stringa01[4]  // viene valutato in 'e'


Note: purtroppo non sono a conoscenza di un metodo per acquisire un singolo carattere da console che sia totalmente portabile tra piattaforme.
Io ho implementato la lettura del carattere come abbiamo fatto fin ora:
std::cin >> "stringa"
inCarattare = "stringa"[0]
quindi il carattere di ingresso sarà il primo carattere dell'input dalla console. 

